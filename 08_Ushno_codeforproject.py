{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b6a4ae8-754a-478d-a011-647d8c493de3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "data = pd.read_csv('Climate_data.csv')\n",
    "print(\"Dataset Preview:\")\n",
    "print(data.head())\n",
    "print(\"\\nMissing Values:\")\n",
    "print(data.isnull().sum())\n",
    "data.interpolate(method='linear', inplace=True)\n",
    "\n",
    "X = data[['Year']]\n",
    "y_temp = data['AverageTemperature']\n",
    "y_rain = data['Rainfall']\n",
    "\n",
    "# Train-test split for temperature prediction\n",
    "X_train_temp, X_test_temp, y_train_temp, y_test_temp = train_test_split(X, y_temp, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train-test split for rainfall prediction\n",
    "X_train_rain, X_test_rain, y_train_rain, y_test_rain = train_test_split(X, y_rain, test_size=0.2, random_state=42)\n",
    "\n",
    "# Linear Regression for temperature prediction\n",
    "temp_model = LinearRegression()\n",
    "temp_model.fit(X_train_temp, y_train_temp)\n",
    "y_pred_temp = temp_model.predict(X_test_temp)\n",
    "\n",
    "# Linear Regression for rainfall prediction\n",
    "rain_model = LinearRegression()\n",
    "rain_model.fit(X_train_rain, y_train_rain)\n",
    "y_pred_rain = rain_model.predict(X_test_rain)\n",
    "\n",
    "print(\"\\nTemperature Prediction Model:\")\n",
    "print(\"Mean Squared Error:\", mean_squared_error(y_test_temp, y_pred_temp))\n",
    "\n",
    "print(\"\\nRainfall Prediction Model:\")\n",
    "print(\"Mean Squared Error:\", mean_squared_error(y_test_rain, y_pred_rain))\n",
    "\n",
    "# Future projection (next 20 years)\n",
    "future_years = pd.DataFrame({'Year': range(data['Year'].max() + 1, data['Year'].max() + 21)})\n",
    "future_temp = temp_model.predict(future_years)\n",
    "future_rain = rain_model.predict(future_years)\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(data['Year'], data['AverageTemperature'], label='Historical Data')\n",
    "plt.plot(future_years['Year'], future_temp, label='Future Projection', linestyle='--')\n",
    "plt.title('Temperature Projection')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Average Temperature (Â°C)')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(data['Year'], data['Rainfall'], label='Historical Data')\n",
    "plt.plot(future_years['Year'], future_rain, label='Future Projection', linestyle='--')\n",
    "plt.title('Rainfall Projection')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Rainfall (mm)')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "future_projection = pd.DataFrame({\n",
    "    'Year': future_years['Year'],\n",
    "    'ProjectedTemperature': future_temp,\n",
    "    'ProjectedRainfall': future_rain\n",
    "})\n",
    "future_projection.to_csv('Future_projection.csv', index=False)\n",
    "print(\"Future projections saved to 'Future_projection.csv'\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
